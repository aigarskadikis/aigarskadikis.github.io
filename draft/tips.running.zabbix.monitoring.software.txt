
# start with official document:
https://www.zabbix.com/documentation/current/en/manual/installation/requirements/best_practices


=== arhitecture ===
- use same DB flavor for central server and proxies. do not mix mysql with postgreSQL
- use sqlite3 database if all zabbix proxies are small (less than 500 NVPS). sqlite3 requires no maintenance. less software to maintain on Zabbix proxy.
- use zabbix proxies to do data collection and preprocessing. central server will calculate triggers and send emails, open tickets.
- use table partitioning on central server
- table partitioning for higly loaded zabbix proxy


=== performance ===
- finetune the database engine to utilize the available memory. 'free -h'
- turn off binlog on Zabbix proxies (MySQL)


=== misconfiguration ===
- timeout at agent side must be lower than on proxy/server. lower at least by 1s. Timeout=29 for agent is last acceptable
- when running central server with MySQL, the houskeeper settings must match the settings for partitioning script
- every new major version is having new helth templates. this must be manually updated


=== maintenance, transparency, troubleshooting ===
- dedicated DB users for frontend, backend, partitioning, backup script, grafana. This will ease up troubleshooting in case of overload.
- do not allow connnections to database from any host
- do not erase the default value from config file
- in case of HA used for proxy/server, enable /etc/zabbix/zabbix_server.d, /etc/zabbix/zabbix_proxy.d and keep the main configuration synchronized
- if all devices are suppose to be online 24/7, then do not set big number for "StartUnreachablePollers". Set "StartUnreachablePollers=1" and do zabbix_proxy -R log_level_increase="unreachable poller". Track down the problem and fix the issue.


=== max ===
- for all data collectors use less proccesses. let them be 60% busy in AVG
- using an IP address to connect to endpoint is more reliable than connection to DNS
- table "housekeeper" can use black hole table engine
- if network configuration can offord to use "Remote" templates for Zabbix proxies - this can be more reliable way to get health for proxy when proxy is overloaded.



=== knowledge ===
- for write intensive workload the best thing is to use postgresql with timescaledb as the data is firstly is inserted in memory. later flushed down to the disks
- enable inventory
- have at least one autoregistration action per windows, one autoregistration action per linux
- discovery actions are working in stack. One can assign template, other(s) can assign host group(s)
- there is an option to keep only raw history, do not calculate trends. A way to save storage.
- it's possible to keep/calculate only trends without storing history. A way to save write throuput.
- recovery message required.
- repeated notifications
- if multiple instances (test/preprod/prod), do a crossover health monitoring.
- TLS 1.3 uses less steps for handshake reducing overall workload. if we have OpenSSL package with version 1.1+ (on all hosts), we can modify agent/proxy/server configuration files to use only TLS 1.3. in large environment it can give 3-5% load reduce (cpu/network latency).
- trigger for write cache graph has not build correctly. leason learned the hard way. It will create many side effects when write cache is NOT 100% free (or is NOT 0% used) for 5+ minutes. The line must stay straight all the time. No trianges, no parabolic pictures. Actually it is quite impossible to build a meaningfull trigger, because the trigger will not fire up in time, because the write cache is corrupted.
- NVPS does not count dependent items
- housekeeper run DELETE command towards all 5 tables, even if the data type belong to 1 table. a waste of DELETE commands
- open(active) problems will degrate performance of user interface. for example 500 000 open problems will kill excitement to use frontend. Imagine the paperwork required to fill 500 000 problems.
- a repeted/failed notification will degrate performance of problems page.
- a non-super administrator requires more validations for DB server. The best frontend speed will be always for "Zabbix Super Admin"


=== db ===
- vacuum must be working. no dead tuples
- for intensive load db partitioning must be implemented
- housekeeper not 100% busy
- if a log of memory, hugepages must be usead

